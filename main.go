package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

//–ó–∞–º–µ–Ω–∏–ª –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –≤—ã–≥—Ä—É–∑–∫–æ–π –≤ GitHub
//const YOUR_TELEGRAM_BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —á–∞—Ç
type ShoppingBot struct {
	mu            sync.Mutex
	shoppingLists map[int64][]string // –∫–ª—é—á - chat ID, –∑–Ω–∞—á–µ–Ω–∏–µ - —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
}

func NewShoppingBot() *ShoppingBot {
	return &ShoppingBot{
		shoppingLists: make(map[int64][]string),
	}
}

// –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
func (b *ShoppingBot) startNewList(chatID int64) string {
	b.mu.Lock()
	defer b.mu.Unlock()

	b.shoppingLists[chatID] = []string{} // –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
	return "<b>üÜï –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞—á–∞—Ç.</b> –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—É–Ω–∫—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞!"
}

// –î–æ–±–∞–≤–∏—Ç—å –ø—É–Ω–∫—Ç—ã –≤ —Å–ø–∏—Å–æ–∫
func (b *ShoppingBot) addToList(chatID int64, items []string) string {
	b.mu.Lock()
	defer b.mu.Unlock()

	for _, item := range items {
		trimmed := strings.TrimSpace(item)
		if trimmed != "" {
			b.shoppingLists[chatID] = append(b.shoppingLists[chatID], trimmed)
		}
	}
	return "<b>‚úÖ –ü—É–Ω–∫—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫.</b>"
}

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
func (b *ShoppingBot) getList(chatID int64) string {
	b.mu.Lock()
	defer b.mu.Unlock()

	list, exists := b.shoppingLists[chatID]
	if !exists || len(list) == 0 {
		return "<b>üìã –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.</b>"
	}

	var result strings.Builder
	result.WriteString("<b>üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:</b>\n")
	for i, item := range list {
		// –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
		result.WriteString(fmt.Sprintf("%d. %s\n", i+1, item))
	}
	return result.String()
}

// –ó–∞—á–µ—Ä–∫–Ω—É—Ç—å –ø—É–Ω–∫—Ç
func (b *ShoppingBot) strikeThrough(chatID int64, index int) (string, error) {
	b.mu.Lock()
	defer b.mu.Unlock()

	list, exists := b.shoppingLists[chatID]
	if !exists || len(list) == 0 {
		return "", fmt.Errorf("<b>‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –≤—ã—á–µ—Ä–∫–∏–≤–∞—Ç—å.</b>")
	}

	if index < 1 || index > len(list) {
		return "", fmt.Errorf("<b>‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç.</b>")
	}

	// –ó–∞—á–µ—Ä–∫–Ω—É—Ç—å –ø—É–Ω–∫—Ç
	item := list[index-1]
	list[index-1] = fmt.Sprintf("<s>%s</s>", item) // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML <s> –¥–ª—è –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
	b.shoppingLists[chatID] = list
	return "<b>‚úÖ –ü—É–Ω–∫—Ç –≤—ã—á–µ—Ä–∫–Ω—É—Ç.</b>", nil
}

// –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ
func (b *ShoppingBot) unstrike(chatID int64, index int) (string, error) {
	b.mu.Lock()
	defer b.mu.Unlock()

	list, exists := b.shoppingLists[chatID]
	if !exists || len(list) == 0 {
		return "", fmt.Errorf("<b>‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.</b>")
	}

	if index < 1 || index > len(list) {
		return "", fmt.Errorf("<b>‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç.</b>")
	}

	// –£–±–∏—Ä–∞–µ–º –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
	item := list[index-1]
	if strings.HasPrefix(item, "<s>") && strings.HasSuffix(item, "</s>") {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
		list[index-1] = item[3 : len(item)-4]
		b.shoppingLists[chatID] = list
		return "<b>‚úÖ –ó–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>", nil
	}

	return "<b>‚ö†Ô∏è –≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –Ω–µ –±—ã–ª –∑–∞—á—ë—Ä–∫–Ω—É—Ç.</b>", nil
}

// –£–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç
func (b *ShoppingBot) deleteItem(chatID int64, index int) (string, error) {
	b.mu.Lock()
	defer b.mu.Unlock()

	list, exists := b.shoppingLists[chatID]
	if !exists || len(list) == 0 {
		return "", fmt.Errorf("<b>‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.</b>")
	}

	if index < 1 || index > len(list) {
		return "", fmt.Errorf("<b>‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç.</b>")
	}

	// –£–¥–∞–ª—è–µ–º –ø—É–Ω–∫—Ç
	list = append(list[:index-1], list[index:]...) // –ò—Å–∫–ª—é—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
	b.shoppingLists[chatID] = list
	return "<b>‚úÖ –ü—É–Ω–∫—Ç —É–¥–∞–ª—ë–Ω.</b>", nil
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
	err := godotenv.Load()
	if err := godotenv.Load(); err != nil {
    log.Printf("Warning: .env file not found, using environment variables")
}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatalf("TELEGRAM_BOT_TOKEN not set in environment")
	}

	log.Printf("Starting bot with token: %s", token)

	// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	// –£–¥–∞–ª—è–µ–º Webhook, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
	_, err = bot.Request(tgbotapi.DeleteWebhookConfig{})
	if err != nil {
		log.Fatalf("Failed to delete webhook: %v", err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)
	shoppingBot := NewShoppingBot()

	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID // –ü–æ–ª—É—á–∞–µ–º chat ID
		var response string

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
		switch {
		case strings.HasPrefix(update.Message.Text, "/start"):
			response = "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫. –ö–æ–º–∞–Ω–¥—ã:\n" +
				"1Ô∏è‚É£ /newlist - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫\n" +
				"2Ô∏è‚É£ /showlist - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫\n" +
				"3Ô∏è‚É£ /strike [‚Ññ] - –≤—ã—á–µ—Ä–∫–Ω—É—Ç—å –ø—É–Ω–∫—Ç\n" +
				"4Ô∏è‚É£ /unstrike [‚Ññ] - –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ\n" +
				"5Ô∏è‚É£ /delete [‚Ññ] - —É–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç\n"

		case strings.HasPrefix(update.Message.Text, "/newlist"):
			response = shoppingBot.startNewList(chatID)

		case strings.HasPrefix(update.Message.Text, "/showlist"):
			response = shoppingBot.getList(chatID)

		case strings.HasPrefix(update.Message.Text, "/strike"):
			arg := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "/strike"))
			index, err := strconv.Atoi(arg)
			if err != nil {
				response = "<b>‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –¥–ª—è –≤—ã—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.</b>"
				log.Printf("Failed to parse strike index: %v", err)
			} else {
				list, err := shoppingBot.strikeThrough(chatID, index)
				if err != nil {
					response = err.Error()
				} else {
					response = list
				}
			}

		case strings.HasPrefix(update.Message.Text, "/unstrike"):
			arg := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "/unstrike"))
			index, err := strconv.Atoi(arg)
			if err != nil {
				response = "<b>‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.</b>"
				log.Printf("Failed to parse unstrike index: %v", err)
			} else {
				list, err := shoppingBot.unstrike(chatID, index)
				if err != nil {
					response = err.Error()
				} else {
					response = list
				}
			}

		case strings.HasPrefix(update.Message.Text, "/delete"):
			arg := strings.TrimSpace(strings.TrimPrefix(update.Message.Text, "/delete"))
			index, err := strconv.Atoi(arg)
			if err != nil {
				response = "<b>‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.</b>"
				log.Printf("Failed to parse delete index: %v", err)
			} else {
				list, err := shoppingBot.deleteItem(chatID, index)
				if err != nil {
					response = err.Error()
				} else {
					response = list
				}
			}

		default:
			// –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, —Ä–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
			lines := strings.Split(update.Message.Text, "\n")
			response = shoppingBot.addToList(chatID, lines)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
		msg := tgbotapi.NewMessage(chatID, response)
		msg.ParseMode = "HTML" // –£–∫–∞–∑—ã–≤–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É
		if _, err := bot.Send(msg); err != nil {
			log.Printf("Failed to send message: %v", err)
		}
	}
}
