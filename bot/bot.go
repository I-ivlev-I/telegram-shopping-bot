package bot

import (
	"fmt"
	"strconv"
	"strings"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type ShoppingBot struct {
	mu            sync.Mutex
	shoppingLists map[int64][]string
}

func NewShoppingBot() *ShoppingBot {
	return &ShoppingBot{
		shoppingLists: make(map[int64][]string),
	}
}

func (b *ShoppingBot) StartNewList(chatID int64) string {
	b.mu.Lock()
	defer b.mu.Unlock()
	b.shoppingLists[chatID] = []string{}
	return "<b>üÜï –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞—á–∞—Ç.</b> –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—É–Ω–∫—Ç–∞–º–∏ —Å–ø–∏—Å–∫–∞!"
}

func (b *ShoppingBot) AddToList(chatID int64, items []string) string {
	b.mu.Lock()
	defer b.mu.Unlock()
	for _, item := range items {
		trimmed := strings.TrimSpace(item)
		if trimmed != "" {
			b.shoppingLists[chatID] = append(b.shoppingLists[chatID], trimmed)
		}
	}
	return "<b>‚úÖ –ü—É–Ω–∫—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫.</b>"
}

func (b *ShoppingBot) GetList(chatID int64) string {
	b.mu.Lock()
	defer b.mu.Unlock()
	list, exists := b.shoppingLists[chatID]
	if !exists || len(list) == 0 {
		return "<b>üìã –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç.</b>"
	}

	var result strings.Builder
	result.WriteString("<b>üìã –í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:</b>\n")
	for i, item := range list {
		result.WriteString(fmt.Sprintf("%d. %s\n", i+1, item))
	}
	return result.String()
}

func (b *ShoppingBot) DeleteItem(chatID int64, index int) (string, error) {
	b.mu.Lock()
	defer b.mu.Unlock()
	list, exists := b.shoppingLists[chatID]
	if !exists || len(list) == 0 {
		return "", fmt.Errorf("<b>‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.</b>")
	}
	if index < 1 || index > len(list) {
		return "", fmt.Errorf("<b>‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç.</b>")
	}
	b.shoppingLists[chatID] = append(list[:index-1], list[index:]...)
	return "<b>‚úÖ –ü—É–Ω–∫—Ç —É–¥–∞–ª—ë–Ω.</b>", nil
}

func (b *ShoppingBot) StrikeThrough(chatID int64, index int) (string, error) {
	b.mu.Lock()
	defer b.mu.Unlock()
	list, exists := b.shoppingLists[chatID]
	if !exists || len(list) == 0 {
		return "", fmt.Errorf("<b>‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –≤—ã—á–µ—Ä–∫–∏–≤–∞—Ç—å.</b>")
	}
	if index < 1 || index > len(list) {
		return "", fmt.Errorf("<b>‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç.</b>")
	}
	list[index-1] = "<s>" + list[index-1] + "</s>"
	b.shoppingLists[chatID] = list
	return "<b>‚úÖ –ü—É–Ω–∫—Ç –≤—ã—á–µ—Ä–∫–Ω—É—Ç.</b>", nil
}

func (b *ShoppingBot) unstrike(chatID int64, index int) (string, error) {
	b.mu.Lock()
	defer b.mu.Unlock()

	list, exists := b.shoppingLists[chatID]
	if !exists || len(list) == 0 {
		return "", fmt.Errorf("<b>‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.</b>")
	}

	if index < 1 || index > len(list) {
		return "", fmt.Errorf("<b>‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç.</b>")
	}

	item := list[index-1]
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ <s>...</s>
	if strings.HasPrefix(item, "<s>") && strings.HasSuffix(item, "</s>") {
		list[index-1] = item[3 : len(item)-4] // —É–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ <s>...</s>
		b.shoppingLists[chatID] = list
		return "<b>‚úÖ –ó–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.</b>", nil
	}

	return "<b>‚ö†Ô∏è –≠—Ç–æ—Ç –ø—É–Ω–∫—Ç –Ω–µ –±—ã–ª –∑–∞—á—ë—Ä–∫–Ω—É—Ç.</b>", nil
}

func HandleUpdate(b *ShoppingBot, message *tgbotapi.Message) string {
	chatID := message.Chat.ID

	switch {
	case strings.HasPrefix(message.Text, "/start"):
		return "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫. –ö–æ–º–∞–Ω–¥—ã:\n" +
			"/newlist - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫\n" +
			"/showlist - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n" +
			"/delete [‚Ññ] - —É–¥–∞–ª–∏—Ç—å –ø—É–Ω–∫—Ç\n" +
			"/strike [‚Ññ] - –≤—ã—á–µ—Ä–∫–Ω—É—Ç—å –ø—É–Ω–∫—Ç\n" +
			"/unstrike [‚Ññ] - –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ\n"

	case strings.HasPrefix(message.Text, "/newlist"):
		return b.StartNewList(chatID)

	case strings.HasPrefix(message.Text, "/showlist"):
		return b.GetList(chatID)

	case strings.HasPrefix(message.Text, "/delete"):
		arg := strings.TrimSpace(strings.TrimPrefix(message.Text, "/delete"))
		index, err := strconv.Atoi(arg)
		if err != nil {
			return "<b>‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.</b>"
		}
		response, err := b.DeleteItem(chatID, index)
		if err != nil {
			return err.Error()
		}
		return response

	case strings.HasPrefix(message.Text, "/strike"):
		arg := strings.TrimSpace(strings.TrimPrefix(message.Text, "/strike"))
		index, err := strconv.Atoi(arg)
		if err != nil {
			return "<b>‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –¥–ª—è –≤—ã—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è.</b>"
		}
		response, err := b.StrikeThrough(chatID, index)
		if err != nil {
			return err.Error()
		}
		return response

	case strings.HasPrefix(message.Text, "/unstrike"):
		arg := strings.TrimSpace(strings.TrimPrefix(message.Text, "/unstrike"))
		index, err := strconv.Atoi(arg)
		if err != nil {
			return "<b>‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø—É–Ω–∫—Ç–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è.</b>"
		}
		response, err := b.unstrike(chatID, index)
		if err != nil {
			return err.Error()
		}
		return response

	default:
		// –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—É–Ω–∫—Ç—ã —Å–ø–∏—Å–∫–∞
		lines := strings.Split(message.Text, "\n")
		return b.AddToList(chatID, lines)
	}
}


